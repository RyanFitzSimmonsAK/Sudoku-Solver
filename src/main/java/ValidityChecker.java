import java.util.ArrayList;

/**
 * Two helper methods that determine whether the board state fulfills a certain condition.
 */
public class ValidityChecker {

    /**
     * A method that verifies that the current board state has no conflicts, and is therefore legal.
     *
     * @param board The current board state.
     * @param boxes The boxes generated by the current board state.
     * @return Whether the current board state is legal or not.
     */
    public static boolean legalBoardState(Board board, ArrayList<ArrayList<Cell>> boxes) {
        ArrayList<Integer> accumulative = new ArrayList<Integer>();

        /* Procedurally checking rows for conflicts.  */
        for (ArrayList<Cell> row : board.board) {
            accumulative.clear();

            for (Cell cell : row) {
                if (cell.value == 0) {
                    continue;
                } else if (accumulative.contains(cell.value)) {
                    return false;
                } else {
                    accumulative.add(cell.value);
                }
            }
        }

        /* Procedurally checking columns for conflicts.  */
        for (int column = 0; column < 9; column++) {
            accumulative.clear();

            for (int i = 0; i < board.board.size(); i++) {
                Cell c = board.board.get(i).get(column);

                if (c.value == 0) {
                    continue;
                } else if (accumulative.contains(c.value)) {
                    return false;
                } else {
                    accumulative.add(c.value);
                }
            }
        }

        /* Procedurally checking boxes for conflicts.  */
        for (ArrayList<Cell> box : boxes) {
            accumulative.clear();

            for (Cell cell : box) {
                if (cell.value == 0) {
                    continue;
                } else if (accumulative.contains(cell.value)) {
                    return false;
                } else {
                    accumulative.add(cell.value);
                }
            }
        }
        return true;
    }

    /**
     * Method that determines whether the board is complete and correct.
     * If the board has no empty cells (0s) and is legal, then it is complete.
     * @param board The current board state.
     * @param boxes The boxes generated by the current board state.
     * @return Whether the Sudoku is solved or not.
     */
    public static boolean isComplete(Board board, ArrayList<ArrayList<Cell>> boxes) {
        for (ArrayList<Cell> row : board.board) {
            for (Cell cell : row) {
                if (cell.value == 0){
                    return false;
                }
            }
        }
        return legalBoardState(board, boxes);
    }
}